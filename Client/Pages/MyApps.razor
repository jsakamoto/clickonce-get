@page "/myapps"
@attribute [Authorize]
@implements IDisposable
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject IDialogService Dialog
@inject NavigationManager NavigationManager
@inject IClickOnceAppInfoProvider ClickOnceAppInfoProvider
@inject PersistentComponentState ApplicationState

<div class="my-apps">
    <MudContainer>
        <h2><MudIcon Icon="@Icons.Filled.ViewList" /> Manage Applications</h2>
    </MudContainer>

    <ClickOnceAppList AppList="this.Apps" Manage="true" OnClickEdit="OnClickEdit" OnClickDelete="OnClickDelete" />
</div>

@code
{
    private List<ClickOnceAppInfo> Apps = new List<ClickOnceAppInfo>();

    private PersistingComponentStateSubscription? PersistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        this.PersistingSubscription = this.ApplicationState.RegisterOnPersisting(PersistAppsAsync);
        if (this.ApplicationState.TryTakeFromJson<IEnumerable<ClickOnceAppInfo>>("Apps", out var apps))
        {
            this.Apps.AddRange(apps);
        }
        else
        {
            var myApps = await this.ClickOnceAppInfoProvider.GetOwnedAppsAsync();
            this.Apps.AddRange(myApps);
        }
    }

    private async Task PersistAppsAsync()
    {
        var apps = await this.ClickOnceAppInfoProvider.GetOwnedAppsAsync();
        this.ApplicationState.PersistAsJson("Apps", apps);
    }

    private void OnClickEdit(ClickOnceAppInfo appInfo)
    {
        NavigationManager.NavigateTo($"myapps/{Uri.EscapeDataString(appInfo.Name)}");
    }

    private async Task OnClickDelete(ClickOnceAppInfo appInfo)
    {
        var param = new DialogParameters();
        param.Add("Message", $"This operation delete the \"{appInfo.GetTitleOrName()}\" application from this site. This operation cannot rollback. Are you sure?");
        var confirm = await this.Dialog.Show<ConfirmDialog>(title: "Delete the application", param).Result;
        if (confirm.Cancelled) return;

        try
        {
            var response = await this.HttpClient.DeleteAsync($"api/myapps/{Uri.EscapeDataString(appInfo.Name)}");
            await response.EnsureSuccessStatusCodeAsync();
            this.Apps.Remove(appInfo);

            this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            this.Snackbar.Add($"The \"{appInfo.GetTitleOrName()}\" application was deleted.");
        }
        catch (Exception e)
        {
            await this.Dialog.ShowErrorMessageAsync(e.Message);
        }
    }

    public void Dispose()
    {
        this.PersistingSubscription?.Dispose();
    }
}
