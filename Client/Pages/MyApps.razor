@page "/myapps"
@attribute [Authorize]
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject IDialogService Dialog
@inject NavigationManager NavigationManager
@inject IClickOnceAppInfoProvider ClickOnceAppInfoProvider

<MudContainer>
    <h2>Manage Applications</h2>
</MudContainer>

<div>
    @foreach (var app in Apps)
    {
        <ClickOnceApp @key="app.Name" AppInfo="app" Manage="true" OnClickEdit="OnClickEdit" OnClickDelete="OnClickDelete" />
    }
</div>

<div class="padding"></div>

@code {
    private List<ClickOnceAppInfo> Apps = new List<ClickOnceAppInfo>();

    protected override async Task OnInitializedAsync()
    {
        var myApps = await this.ClickOnceAppInfoProvider.GetOwnedAppsAsync();
        this.Apps.AddRange(myApps);
    }

    private void OnClickEdit(ClickOnceAppInfo appInfo)
    {
        NavigationManager.NavigateTo($"myapps/{Uri.EscapeUriString(appInfo.Name)}");
    }

    private async Task OnClickDelete(ClickOnceAppInfo appInfo)
    {
        var param = new DialogParameters();
        param.Add("Message", $"This operation delete the \"{appInfo.Title}\" application from this site. This operation cannot rollback. Are you sure?");
        var confirm = await this.Dialog.Show<ConfirmDialog>(title: "Delete the application", param).Result;
        if (confirm.Cancelled) return;

        var response = await this.HttpClient.DeleteAsync($"api/myapps/{Uri.EscapeUriString(appInfo.Name)}");
        if (response.IsSuccessStatusCode)
        {
            this.Apps.Remove(appInfo);

            this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            this.Snackbar.Add($"The \"{appInfo.Title}\" application was deleted.");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(errorMessage)) errorMessage = $"{response.StatusCode} ({((int)response.StatusCode)})";
            this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            this.Snackbar.Add($"Error: {errorMessage}", Severity.Error);
        }
    }
}