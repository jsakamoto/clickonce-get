@page "/myapps/upload"
@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@using System.Net.Http.Headers
@using static Toolbelt.Web.CssClassInlineBuilder

@if (Uploading)
{
    <div class="uploading-mask"></div>
    <div class="uploading-progress">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}

<div class="form-container">

    <h2><MudIcon Icon="@Icons.Material.Publish" /> Upload My Application</h2>

    <div class="caption @CssClass(new { HasError })">
        <MudText Typo="Typo.caption">Zip packaged application file</MudText>
    </div>
    <div class="file-selector @CssClass(new { HasError })">
        <label @onclick="OnClickChoseFile" for="f" class="selected-file-name">@SelectedFileName</label>
        <label @onclick="OnClickChoseFile" for="f" class="select-file-button mud-button-root mud-button mud-button-outlined mud-ripple">
            Chose file
        </label>
        <InputFile id="f" OnChange="@OnInputFileChange" style="display:none;" accept=".zip" />
    </div>

    @if (!HasError)
    {
        <div class="mud-input-helper-text">Max allowed file size is @(MaxAllowedSizeMB)MB.</div>
    }
    else
    {
        <div class="mud-input-helper-text mud-input-error">@ErrorMessage</div>
    }

    <div class="information my-6">
        <MudIcon Icon="@Icons.Material.Info" />
        If you upload the package of a new version of an application that was already registered, it will replace/update the package of that application.
    </div>

    <div class="my-6">
        <MudButton OnClick="OnClickStartUpload" Disabled="@(!Uploadable)"
                   Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium">
            Start upload
        </MudButton>
    </div>
</div>

@code {
    private const int MaxAllowedSizeMB = 10;
    private const int MaxAllowedSize = MaxAllowedSizeMB * 1024 * 1024;

    private IBrowserFile LastSelectedFile = null;

    private string SelectedFileName => LastSelectedFile?.Name ?? "(No file selected)";

    private bool Uploadable = false;

    private string ErrorMessage = "";

    private bool HasError => ErrorMessage != "";

    private bool Uploading = false;

    private void OnClickChoseFile()
    {
        this.LastSelectedFile = null;
        this.ErrorMessage = "";
        this.Uploadable = false;
    }

    private void OnInputFileChange(InputFileChangeEventArgs args)
    {
        this.LastSelectedFile = args.File;
        if (args.File.Size > MaxAllowedSize)
        {
            this.ErrorMessage = $"The size of chosed file ({args.File.Size / 1024.0 / 1024.0:#,0.0}MB) is over {MaxAllowedSizeMB}MB.";
        }
        else
        {
            this.Uploadable = true;
        }
    }

    private async Task OnClickStartUpload()
    {
        var dialogResult = await Dialog.Show<WarnBeforeUploadDialog>(title: "Warning").Result;
        if (dialogResult.Cancelled) return;

        try
        {
            this.Uploading = true;
            this.StateHasChanged();

            await Task.Delay(3000);

            using var stream = this.LastSelectedFile.OpenReadStream(MaxAllowedSize);
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(stream, Convert.ToInt32(LastSelectedFile.Size)), "zipedPackage", LastSelectedFile.Name);

            var response = await this.HttpClient.PostAsync("api/myapps/zipedpackage", content);
            var responseContent = await response.Content.ReadAsStringAsync();

            this.Uploading = false;

            if (response.IsSuccessStatusCode)
            {
                this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                this.Snackbar.Add($"The zip packaged application file was uploaded.");
                var url = $"myapps/{Uri.EscapeUriString(responseContent)}";
                this.NavigationManager.NavigateTo(url);
            }
            else
            {
                var parameter = new DialogParameters();
                parameter.Add("Message", responseContent);
                await Dialog.Show<ErrorDialog>(title: "Error", parameter).Result;
            }
        }
        finally { this.Uploading = false; }
    }
}
