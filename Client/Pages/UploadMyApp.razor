@page "/myapps/upload"
@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@using System.Net.Http.Headers

<div class="form-container">

    <h2>Upload My Application</h2>

    <div>
        <MudText Typo="Typo.caption">Zip packaged application file</MudText>
    </div>
    <div class="file-selector">
        <label @onclick="OnClickChoseFile" for="f" class="selected-file-name">@SelectedFileName</label>
        <label @onclick="OnClickChoseFile" for="f" class="select-file-button mud-button-root mud-button mud-button-outlined mud-ripple">
            Chose file
        </label>
        <InputFile id="f" OnChange="@OnInputFileChange" style="display:none;" accept=".zip" />
    </div>
    <div class="mud-input-helper-text">
        Max allowed file size is @(MaxAllowedSizeMB)MB.
    </div>

    <div>
        @if (ErrorMessage != "")
        {
            <MudChip Color="Color.Warning">@ErrorMessage</MudChip>
        }
    </div>
    <div class="my-6">
        <MudButton OnClick="OnClickStartUpload" Disabled="@(!Uploadable)"
                   Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium">
            Start upload
        </MudButton>
    </div>
</div>

@code {
    private const int MaxAllowedSizeMB = 10;
    private const int MaxAllowedSize = MaxAllowedSizeMB * 1024 * 1024;

    private IBrowserFile LastSelectedFile = null;

    private string SelectedFileName => LastSelectedFile?.Name ?? "(No file selected)";

    private bool Uploadable = false;

    private string ErrorMessage = "";

    private void OnClickChoseFile()
    {
        this.LastSelectedFile = null;
        this.ErrorMessage = "";
        this.Uploadable = false;
    }

    private void OnInputFileChange(InputFileChangeEventArgs args)
    {
        this.LastSelectedFile = args.File;
        if (args.File.Size > MaxAllowedSize)
        {
            this.ErrorMessage = $"The size of chosed file ({args.File.Size / 1024.0 / 1024.0:#,0.0}MB) is over {MaxAllowedSizeMB}MB.";
        }
        else
        {
            this.Uploadable = true;
        }
    }

    private async Task OnClickStartUpload()
    {
        try
        {
            using var stream = this.LastSelectedFile.OpenReadStream(MaxAllowedSize);
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(stream, Convert.ToInt32(LastSelectedFile.Size)), "zipedPackage", LastSelectedFile.Name);

            var response = await this.HttpClient.PostAsync("api/myapps/zipedpackage", content);
            var responseContent = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {
                var url = $"myapps/{Uri.EscapeUriString(responseContent)}";
                this.NavigationManager.NavigateTo(url);
            }
            else
            {
                Console.WriteLine($"responseContent: {responseContent}");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
        }
    }
}
