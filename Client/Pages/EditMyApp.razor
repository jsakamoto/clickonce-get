@page "/myapps/{appName}"
@attribute [Authorize]
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IClickOnceAppInfoProvider ClickOnceAppInfoProvider
@inject IDialogService Dialog

<div class="form-container">

    @if (AppInfo != null)
    {
        <h2><MudIcon Icon="@Icons.Material.Edit" /> Edit My App</h2>

        <EditForm Model="AppInfo" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />

            <MudText Typo="Typo.caption">Application ID</MudText>
            <MudText Typo="Typo.body1">@AppInfo.Name</MudText>

            <div class="my-4">
                <MudTextField T="string" Label="Title" HelperText="optional, max 140 characters" InputType="InputType.Text" autofocus Immediate="true"
                              @bind-Value="AppInfo.Title" For="@(() => AppInfo.Title)" />
            </div>
            <div class="my-4">
                <MudTextField T="string" Label="Description" HelperText="optional, max 140 characters" InputType="InputType.Text" Lines="3" Immediate="true"
                              @bind-Value="AppInfo.Description" For="@(() => AppInfo.Description)" />
            </div>
            <MudTextField T="string" Label="Project URL" HelperText="optional" InputType="InputType.Text" Immediate="true"
                          @bind-Value="AppInfo.ProjectURL" For="@(() => AppInfo.ProjectURL)" />
            <MudCheckBox Label="Disclose publisher account name"
                         @bind-Checked="DisclosePublisher" />

            <div class="my-6">
                <MudButton OnClick="OnClickBack" Variant="Variant.Outlined">Back to my apps</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="@(!IsDirty)">Save</MudButton>
            </div>

        </EditForm>
    }
</div>

@code {
    [Parameter]
    public string AppName { get; set; }

    private ClickOnceAppInfo AppInfo;

    private bool DisclosePublisher;

    private ClickOnceAppInfo OriginalAppInfo;

    private bool IsDirty
    {
        get
        {
            return
                this.AppInfo.Title != this.OriginalAppInfo.Title ||
                this.AppInfo.Description != this.OriginalAppInfo.Description ||
                this.AppInfo.ProjectURL != this.OriginalAppInfo.ProjectURL ||
                DisclosePublisher != (!string.IsNullOrEmpty(this.OriginalAppInfo.PublisherName));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            this.AppInfo = await ClickOnceAppInfoProvider.GetOwnedAppAsync(this.AppName);
            this.DisclosePublisher = !string.IsNullOrEmpty(this.AppInfo.PublisherName);

            this.OriginalAppInfo = new ClickOnceAppInfo
            {
                Title = this.AppInfo.Title,
                Description = this.AppInfo.Description,
                ProjectURL = this.AppInfo.ProjectURL,
                PublisherName = this.AppInfo.PublisherName
            };
        }
        catch (Exception e)
        {
            await Dialog.ShowErrorMessageAsync(e.Message);
            this.NavigationManager.NavigateTo("myapps");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await this.JS.InvokeVoidAsync("ClickOnceGet.Client.Helper.autofocus");
        }
    }

    private async Task OnClickBack()
    {
        if (this.IsDirty)
        {
            var parameter = new DialogParameters();
            parameter.Add("Message", "All changes will be discarded. Do you want to continue?");
            var response = await Dialog.Show<ConfirmDialog>("BACK TO MY APPS", parameter).Result;
            if (response.Cancelled) return;
        }
        this.NavigationManager.NavigateTo("myapps");
    }

    private async Task OnValidSubmit()
    {
        try
        {
            var url = $"api/myapps/{Uri.EscapeUriString(AppInfo.Name)}?disclosePublisher={DisclosePublisher}";
            var response = await this.HttpClient.PutAsJsonAsync(url, AppInfo);
            await response.EnsureSuccessStatusCodeAsync();

            this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            this.Snackbar.Add($"The \"{AppInfo.GetTitleOrName()}\" was updated.");

            this.NavigationManager.NavigateTo("myapps");
        }
        catch (Exception e) { await Dialog.ShowErrorMessageAsync(e.Message); }
    }
}