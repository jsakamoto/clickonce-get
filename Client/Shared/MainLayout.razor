@inherits LayoutComponentBase
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@using static Toolbelt.Web.CssClassInlineBuilder

<div>
    <MudAppBar Fixed="false" Elevation="0">
        <h1><a href="/">ClickOnce Get</a></h1>

        <MudAppBarSpacer />

        <div class="@CssClass(new {Active = IsActiveNav<UploadMyApp>()})">
            <MudButton Color="Color.Inherit" Link="myapps/upload">upload my app</MudButton>
        </div>
        <div Class="@CssClass(new {Active = IsActiveNav<MyApps>() || IsActiveNav<EditMyApp>()})">
            <MudButton Color="Color.Inherit" Link="myapps">Manage my apps</MudButton>
        </div>
        <MudButton Color="Color.Inherit">Documents</MudButton>

        <AuthorizeView>
            <Authorized>
                <span class="user-view">
                    <MudAvatar Image="@($"https://avatars.githubusercontent.com/{context.User.Identity.Name}")" Size="Size.Small" alt="@context.User.Identity.Name" />
                    @context.User.Identity.Name
                    <MudMenu Icon="@Icons.Material.MoreVert" Color="Color.Inherit">
                        <MudMenuItem OnClick="OnClickSignOut">Sign out</MudMenuItem>
                    </MudMenu>
                </span>
            </Authorized>
            <NotAuthorized>
                <MudButton Link="auth/signin" Target="_top" Color="Color.Inherit" Variant="Variant.Text">
                    Sign In
                </MudButton>
            </NotAuthorized>
        </AuthorizeView>

    </MudAppBar>
</div>
<div>
    @Body
</div>

@code {
    [CascadingParameter]
    RouteData RouteData { get; set; }

    private bool IsActiveNav<TPage>() => this.RouteData?.PageType == typeof(TPage);

    private bool IsActiveNav(params string[] urls)
    {
        //this.RouteData.
        var baseUrl = NavigationManager.BaseUri.TrimEnd('/') + "/";
        return urls.Any(url => string.Compare(baseUrl + url.TrimStart('/'), NavigationManager.Uri, ignoreCase: true) == 0);
    }

    private async Task OnClickSignOut()
    {
        await this.HttpClient.PostAsync("auth/signout", new StringContent(""));
        await (AuthStateProvider as ClientSideAuthenticationStateProvider)?.RefreshAsync();
    }
}