@{
    ViewBag.Title = "Learn more about certificate - " + Localize.SiteTitle;
}
<style>
    li img {
        border: solid 1px #ccc;
        margin: 1rem 0 1rem 0;
        -moz-box-shadow: rgba(0,0,0,0.4) 1px 1px 8px;
        -webkit-box-shadow: rgba(0,0,0,0.4) 1px 1px 8px;
        box-shadow: rgba(0,0,0,0.4) 1px 1px 8px;
    }
</style>

<h2>What's mean "Signed by Pubisher"?</h2>

<p>
    If you look applications with <img src="~/Views/Home/fig-signed-by-publisher.png" alt="Singed by Publisher" /> green badge,
    it means <b>the application was signed by SSH private key which owned by the publisher's GitHub account.</b>
</p>

<p>
    You can verify it manually by following steps.
</p>

<h2>How to verify an app was signed by publisher or not?</h2>

<h3>Prerequirements of this article</h3>
<ul>
    <li>Windows OS</li>
    <li>Installed Git for Windows</li>
    <li>Set the PATH environment variable to "C:\Program Files\Git\usr\bin" for executing "openssl" and "ssh-keygen" commands in command prompt.</li>
</ul>

<h3>Step 1. Get the SSH public key of publisher's GitHub account</h3>

<ol>
    <li>
        Open link the publisher's GitHub profile page.
        <div><img src="~/Views/Home/fig-lmac-01.png" alt="fig.1" /></div>
    </li>
    <li>
        Append ".keys" to the URL, and open it.
        <div><img src="~/Views/Home/fig-lmac-02.png" alt="fig.2" /></div>
    </li>
    <li>
        Then, you will look the publisher's SSH public keys.
        <div><img src="~/Views/Home/fig-lmac-03.png" alt="fig.3" /></div>
    </li>
</ol>

<h3>Step 2. Get the public key of the application signed</h3>

<ol>
    <li>
        Open certificate link, and download .cer file of the application signed.
        <div><img src="~/Views/Home/fig-lmac-04.png" alt="fig.4" /></div>
    </li>
    <li>
        Open command prompt, and extract the public key from .cer file (DER format) and save it to file with PEM format by following command.
        <pre>&gt; openssl x509 -in <i>".cer file path"</i> -inform DER -pubkey -noout &gt; <i>"PEM public key file path"</i></pre>
    </li>
    <li>
        Convert public key format from PEM to SSH by following command.
        <pre>&gt; ssh-keygen.exe -i -m PKCS8 -f <i>"PEM public key file path"</i></pre>
    </li>
    <li>
        Then, you will look the public key with SSH format that used for code signing.
        <div><img src="~/Views/Home/fig-lmac-05.png" alt="fig.5" /></div>
    </li>
</ol>

<h3>Step 3. Compare public keys</h3>

<p>Compare public keys with SSH format both from Step 1 and Step 2.</p>

<p>If these public keys are same, it means <b>the application was signed by private key which owned by the publisher.</b></p>

<p>
    If you trust the publisher,
    and validated the application signed by publisher's private key in this way,
    you may be able to trust the application.
</p>

<h2 id="HowToSignByGitHubSSHKey">
    How to sign an application by your GitHub account SSH key?
</h2>

<h3>Prerequirements of this article</h3>
<ul>
    <li>Windows OS</li>
    <li>Installed Git for Windows</li>
    <li>Set the PATH environment variable to "C:\Program Files\Git\usr\bin" for executing "openssl" command in command prompt.</li>
    <li>You already setuped SSH private/public key and registerd public key to GitHub account.</li>
</ul>

<h3>Steps</h3>
<ol>

    <li>Configure "C:\Program Files\OpenSSL\bin\openssl.cfg": Common name, expiration days, etc...</li>

    <li>
        Open command prompt, and execute following command to generate a self signed certificate (.cer file).
        <pre>&gt; openssl req -new -x509 -key "%HOME%\.ssh\id_rsa" -out <i>"output .cer file path"</i></pre>
    </li>

    <li>
        And generate .pfx file which contains the private key by following command.
        <pre>&gt; openssl pkcs12 -export -inkey "%HOME%\.ssh\id_rsa" -in <i>".cer file path (generated before step)"</i> -out <i>"output .pfx file path"</i></pre>
    </li>
    <li>
        After yo get .pfx file, register the .pfx file to your PC's certificate store as personal certificates.
        You can do it by double clicking .pfx file in Explorer.
        <div><img src="~/Views/Home/fig-lmac-06.gif" alt="fig.6" style="zoom:0.8" /></div>
    </li>
    <li>
        Configure your ClickOnce application project in Visual Studio,
        chose certificate via Project Property &gt;"Signing" category &gt; [Select from Store...].
        <div><img src="~/Views/Home/fig-lmac-07.png" alt="fig.7" /></div>
    </li>
</ol>

